{"version":3,"sources":["data/utils.ts","data/Quizzes.ts","data/getQuizzes.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/coffee.jpg","App.style.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["shuffleArray","array","sort","Math","random","QuizData","question","correct_answer","otherAnswers","wrongAnswers","reduce","a","c","concat","slice","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","answers","checkAnswer","userAnswer","questionNumber","totalQuestions","className","map","answer","correctAnswer","disabled","value","onClick","GlobalStyles","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","useEffect","console","log","startTrivia","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da34fe37.chunk.js","sourcesContent":["export const shuffleArray = (array: any[]) => {\n  // copy the array and sort them\n  return [...array].sort(() => Math.random() - 0.5);\n};\n","export type Quiz = {\n  question: string;\n  correct_answer: string;\n};\n\nexport const QuizData: Quiz[] = [\n  { question: 'ホットティー', correct_answer: 'テカルド' },\n  { question: 'ハーブティー', correct_answer: 'カモミッラ' },\n  { question: 'ピーチティー', correct_answer: 'ペスカ' },\n  {\n    question: 'ホットブラッドオレンジジュース',\n    correct_answer: 'アランチャ カルダ',\n  },\n  { question: 'ホットチョコレート', correct_answer: 'チョコラータ カルダ' },\n  { question: 'アイスティー', correct_answer: 'テ フレッド' },\n  {\n    question: 'レモンアイスティー',\n    correct_answer: 'テ フレッド コン リモーネ',\n  },\n  { question: 'ミルクアイスティー', correct_answer: 'テ フレッド コン ラテ' },\n  { question: 'ピーチアイスティー', correct_answer: 'ペスカ フレッド' },\n  { question: 'ブラッドオレンジジュース', correct_answer: 'アランチャロッサ' },\n  { question: 'グレープフルーツジュース', correct_answer: 'ポンペルモ' },\n  { question: 'ブラッドオレンジ＆トニック', correct_answer: 'アランチャータ' },\n  { question: 'シチリアレモン＆トニック', correct_answer: 'リモナータ' },\n  { question: 'アイスチョコレート', correct_answer: 'チョコラータ フレッド' },\n  { question: 'スパークリングウォーター', correct_answer: 'ガッサータ' },\n  { question: 'エスプレッソ ダブル', correct_answer: 'ドッピオ' },\n  { question: 'エスプレッソ コン パンナ', correct_answer: 'コンパンナ' },\n  { question: 'ホットコーヒー', correct_answer: 'ブレンド' },\n  { question: 'カプチーノ ウィーンスタイル', correct_answer: 'ヴィエネーゼ' },\n  {\n    question: 'アイス ドルチェプレッソ ラズベリー in ブラック',\n    correct_answer: 'ドルチェプレッソ フレッド',\n  },\n  { question: 'アイスコーヒー', correct_answer: 'カフェ フレッド' },\n  { question: 'アイス エスプレッソ', correct_answer: 'エスプレッソ フレッド' },\n  { question: 'アイス 抹茶カプチーノ', correct_answer: '抹茶 フレッド' },\n  {\n    question: 'アイス カプチーノ ウィーンスタイル',\n    correct_answer: 'ヴィエネーゼ フレッド',\n  },\n];\n","import { shuffleArray } from './utils';\nimport { QuizData } from './Quizzes';\n\n// types\nimport { Quiz } from './Quizzes';\n\nexport type QuizState = Quiz & { answers: string[] };\n\nconst otherAnswers = (correct_answer: string) => {\n  const wrongAnswers = QuizData.reduce((a: string[], c: Quiz): string[] => {\n    if (c.correct_answer !== correct_answer) return a.concat(c.correct_answer);\n    return a;\n  }, []);\n  return shuffleArray(wrongAnswers).slice(0, 4);\n};\n\nexport const getQuizzes = (): QuizState[] => {\n  return shuffleArray(\n    QuizData.map((question: Quiz) => ({\n      ...question,\n      answers: shuffleArray([\n        ...otherAnswers(question.correct_answer),\n        question.correct_answer,\n      ]),\n    }))\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border: 2px solid #0085a3;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    background: ${({ correct, userClicked }) => {\n      return correct\n        ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)';\n    }};\n    border: 3px solid #fff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from 'react';\n// Types\nimport { AnswerObject } from '../App';\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  checkAnswer: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  checkAnswer,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className=\"number\">\n      Question: {questionNumber} / {totalQuestions}\n    </p>\n    {/* dangeroulySetInnerHTML はなるべく避ける */}\n    {/* <p dangerouslySetInnerHTML={{ __html: question }} /> */}\n    <p>{question}</p>\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button\n            disabled={userAnswer ? true : false}\n            value={answer}\n            onClick={checkAnswer}\n          >\n            {/* <span dangerouslySetInnerHTML={{ __html: answer }} /> */}\n            <span>{answer}</span>\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/coffee.ef604380.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/coffee.jpg';\n\nexport const GlobalStyles = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    font-family: 'Catamaran', sans-serif;\n  }\n\n  html {\n    height: 100%;\n  }\n\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  /* すべてのpタグに反映 */\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: rgb(235, 235, 235);\n    font-size: 2rem;\n    margin: 0;\n  }\n\n  h1 {\n    font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold',\n      sans-serif;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    font-weight: 400;\n    text-align: center;\n    margin: 20px;\n  }\n\n  .start,\n  .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 2px solid #d38558;\n    border-radius: 10px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\n// import { fetchQuizQuestions } from './API';\nimport { getQuizzes } from './data/getQuizzes';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// Types\n// import { QuestionState, Difficulty } from './API';\nimport { QuizState } from './data/getQuizzes';\nimport { GlobalStyles, Wrapper } from './App.style';\n// Styles\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 24;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  // const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [questions, setQuestions] = useState<QuizState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  useEffect(() => {\n    console.log(questions);\n  }, [questions]);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await getQuizzes();\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // Users answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the fast question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyles />\n      <Wrapper>\n        <h1>Cafe QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions ...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers[number] || undefined}\n            checkAnswer={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}